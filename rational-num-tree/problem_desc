Consider an infinite complete binary tree where the root node is 1/1 and left and right childs of node p/q are p/(p+q) and (p+q)/q, respectively. This tree looks like:
			 1/1
		______|______
		|           |
	   1/2         2/1
	 ___|___     ___|___
	 |     |     |     |
	1/3   3/2   2/3   3/1 // 7, or 3 + 4
   __|__   			 __|__
  |    |			|    |
  1/4  4/3		   3/4  4/1
		3/5 5/2 2/5 5/3	

...
1
1 1
1 2 1
1 3 3 1
1 4 6 4 1

It is known that every positive rational number appears exactly once in this tree. A level-order traversal of the tree results in the following array:
1/1, 1/2, 2/1, 1/3, 3/2, 2/3, 3/1, ...
Please solve the following two questions:

Find the n-th element of the array, where n starts from 1. For example, for the input 2, the correct output is 1/2.
Given p/q, find its position in the array. As an example, the input 1/2 results in the output 2.
Input

The first line of the input gives the number of test cases, T. T test cases follow. Each test case consists of one line. The line contains a problem id (1 or 2) and one or two additional integers:

If the problem id is 1, then only one integer n is given, and you are expected to find the n-th element of the array.
If the problem id is 2, then two integers p and q are given, and you are expected to find the position of p/q in the array.
Output

For each test case:

If the problem id is 1, then output one line containing "Case #x: p q", where x is the case number (starting from 1), and p, q are numerator and denominator of the asked array element, respectively.
If the problem id is 2, then output one line containing "Case #x: n", where x is the case number (starting from 1), and n is the position of the given number.

One way to do it:
	BFS of tree
	dynamically create tree at each level
		Problem: if n is huge, I'll need to keep some amount of 2^n elements in memory, where n is the level in the final tree

It seems like there is a constant-time algorithm that can compute this right away, esp since we can derrive some principles from the input:
	p/q are p/(p+q) and (p+q)/q,

Given a number like 5/17 

First, need to reduce fraction to lowest rational number.
	Euclid for GCD. Divide top and bottom by GCD to pre-process input.

if (type one)
	calculate value at position n
else if (type two)
	reduce fraction
	calculate its appearance
else
	unknown type

int -> rational
valueAt (n) ->
	nth element in "array" = 
		figure out which level it's on
		figure out its spot in that level
		use these to values to determine the actual value

rational -> int
(int, int) -> int
position (numerator, denominator) ->
	higher of two values determines height in tree

At any given level, there are 2^h values.
child of nodes p and q are: p/(p+q) and (p+q)/q,

position = 2^h (where root is 0) + number of elements before p/q in level
valueAt n = height + remaining elements
	height = log2(n)
	remaining elements = traverse n elements from jumped position

This is a recurrence relation:
	n = 1: p = 1, q = 1
	n > 1:  
		parent: p / q
		left: p/(p + q)
		right: (p + q)/q
p = numerator
q = denominator

Given a fraction, can you determine its parent?
1/2 - is this a right or left child?
		or is it the root?

	// all numbers in N
	is right:
		p - q > 0; // num - denom 
	is root:
		num - denum == 0;
	is left:
		q - p > 0; // denom - num 

Given two values, can you determine the height of the tree?
	(p, q) -> h
		floor log2 max p, q

Given the height of the tree, can you determine the offset?
	(h, p, q) -> n
		c = 0
		l = max p q
		r = 1 / l
		while r != (p, q)
			r = next r
			c++
		return 2^h + c

	// return next value in array
	(p, q) -> (p1, q2)
	next (p, q) ->
		if is left p q
			return (q, p)
		if is right p q
			
		
